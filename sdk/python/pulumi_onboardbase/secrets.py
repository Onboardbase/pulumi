# coding=utf-8
# *** WARNING: this file was generated by Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['SecretsArgs', 'Secrets']

@pulumi.input_type
class SecretsArgs:
    def __init__(__self__, *,
                 api_key: pulumi.Input[str],
                 environment: pulumi.Input[str],
                 passcode: pulumi.Input[str],
                 project: pulumi.Input[str]):
        """
        The set of arguments for constructing a Secrets resource.
        :param pulumi.Input[str] api_key: API Key for authorization
        :param pulumi.Input[str] environment: The environment to pull secrets from
        :param pulumi.Input[str] passcode: The API Key passcode for encryption
        :param pulumi.Input[str] project: The Project to pull secrets from
        """
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "environment", environment)
        pulumi.set(__self__, "passcode", passcode)
        pulumi.set(__self__, "project", project)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> pulumi.Input[str]:
        """
        API Key for authorization
        """
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter
    def environment(self) -> pulumi.Input[str]:
        """
        The environment to pull secrets from
        """
        return pulumi.get(self, "environment")

    @environment.setter
    def environment(self, value: pulumi.Input[str]):
        pulumi.set(self, "environment", value)

    @property
    @pulumi.getter
    def passcode(self) -> pulumi.Input[str]:
        """
        The API Key passcode for encryption
        """
        return pulumi.get(self, "passcode")

    @passcode.setter
    def passcode(self, value: pulumi.Input[str]):
        pulumi.set(self, "passcode", value)

    @property
    @pulumi.getter
    def project(self) -> pulumi.Input[str]:
        """
        The Project to pull secrets from
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: pulumi.Input[str]):
        pulumi.set(self, "project", value)


class Secrets(pulumi.ComponentResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 api_key: Optional[pulumi.Input[str]] = None,
                 environment: Optional[pulumi.Input[str]] = None,
                 passcode: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a Secrets resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] api_key: API Key for authorization
        :param pulumi.Input[str] environment: The environment to pull secrets from
        :param pulumi.Input[str] passcode: The API Key passcode for encryption
        :param pulumi.Input[str] project: The Project to pull secrets from
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SecretsArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Secrets resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SecretsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SecretsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 api_key: Optional[pulumi.Input[str]] = None,
                 environment: Optional[pulumi.Input[str]] = None,
                 passcode: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is not None:
            raise ValueError('ComponentResource classes do not support opts.id')
        else:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SecretsArgs.__new__(SecretsArgs)

            if api_key is None and not opts.urn:
                raise TypeError("Missing required property 'api_key'")
            __props__.__dict__["api_key"] = api_key
            if environment is None and not opts.urn:
                raise TypeError("Missing required property 'environment'")
            __props__.__dict__["environment"] = environment
            if passcode is None and not opts.urn:
                raise TypeError("Missing required property 'passcode'")
            __props__.__dict__["passcode"] = passcode
            if project is None and not opts.urn:
                raise TypeError("Missing required property 'project'")
            __props__.__dict__["project"] = project
            __props__.__dict__["secrets"] = None
        super(Secrets, __self__).__init__(
            'onboardbase:index:secrets',
            resource_name,
            __props__,
            opts,
            remote=True)

    @property
    @pulumi.getter
    def secrets(self) -> pulumi.Output[str]:
        """
        The secrets
        """
        return pulumi.get(self, "secrets")

