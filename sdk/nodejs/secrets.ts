// *** WARNING: this file was generated by Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Secrets extends pulumi.ComponentResource {
    /** @internal */
    public static readonly __pulumiType = 'onboardbase:index:secrets';

    /**
     * Returns true if the given object is an instance of Secrets.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Secrets {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Secrets.__pulumiType;
    }

    /**
     * The secrets
     */
    public /*out*/ readonly secrets!: pulumi.Output<string>;

    /**
     * Create a Secrets resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SecretsArgs, opts?: pulumi.ComponentResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.apiKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'apiKey'");
            }
            if ((!args || args.environment === undefined) && !opts.urn) {
                throw new Error("Missing required property 'environment'");
            }
            if ((!args || args.passcode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'passcode'");
            }
            if ((!args || args.project === undefined) && !opts.urn) {
                throw new Error("Missing required property 'project'");
            }
            resourceInputs["apiKey"] = args ? args.apiKey : undefined;
            resourceInputs["environment"] = args ? args.environment : undefined;
            resourceInputs["passcode"] = args ? args.passcode : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["secrets"] = undefined /*out*/;
        } else {
            resourceInputs["secrets"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Secrets.__pulumiType, name, resourceInputs, opts, true /*remote*/);
    }
}

/**
 * The set of arguments for constructing a Secrets resource.
 */
export interface SecretsArgs {
    /**
     * API Key for authorization
     */
    apiKey: pulumi.Input<string>;
    /**
     * The environment to pull secrets from
     */
    environment: pulumi.Input<string>;
    /**
     * The API Key passcode for encryption
     */
    passcode: pulumi.Input<string>;
    /**
     * The Project to pull secrets from
     */
    project: pulumi.Input<string>;
}
